// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static int next, size, data;
    static Array freeList;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let next = 0;
        let size = 1;
        let data = 2;
        let freeList = heap;
        let freeList[next] = 0;     // next
        let freeList[size] = 14334; // length = 16383 - 2048 + 1 - 2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        do Memory._checkAddress(address);
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        do Memory._checkAddress(address);
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int s) {
        var Array current, previous;
        let current = freeList;
        while ((current > 0) & (current[size] < s)) {
            let previous = current;
            let current = current[next];
        }

        if (current = 0) {
            do Sys.error(0);
            return 0;
        }

        do Memory._split(current, s);
        if (previous = 0) {
            let freeList = current[next];
        } else {
            let previous[next] = current[next];
        }

        let current[next] = 0;
        return current + data;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array block;
        let block = o - data;
        do Memory._checkHeapAddress(block);
        let block[next] = freeList;
        let freeList = block;
        return;
    }    

    function void _checkAddress(int address) {
        if (address < 0) {
            do Sys.error(1);
        }
        return;
    }

    function void _checkHeapAddress(int address) {
        if ((address < heap) | (address > 16381)) {
            do Sys.error(1);
        }
        return;
    }

    function void _split(Array block, int s) {
        var Array nextBlock;
        var int nextBlockSize;
        let nextBlockSize = block[size] - s - 2;
        if (nextBlockSize > 0) {
            let nextBlock = block + s + 2;
            let nextBlock[next] = block[next];
            let nextBlock[size] = nextBlockSize;
            let block[next] = nextBlock;
            let block[size] = s;
        }
        return;
    }
}
